#use nrow() function to retrive data frame rows from sample list
num_rows <- 1:nrow(demo_table)
#use sample() to sample specified rows
sample_rows <- sample(num_rows,3)
#combining all three steps into one statement   trailing comma
demo_table[sample(1:nrow(demo_table), 3),]
?tidyverse
?mutate
#function mutate() adds new variables and preserves existing ones; transmutate() adds new variables and drops existing ones, new variables overwrite existing variables of the same name. Variables can be removed by setting their value to NULL
demo_table <- demo_table %>% mutate(Mileage_per_Year=Total_Miles/(2020-Year),IsActive=TRUE)
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer), .groups = 'keep')
?gather()
demo_table3 <- read.csv('01_Demo/demo2.csv', check.names = F, stringsAsFactors = F)
#using gather to reshape/similar to edit dtypes
long_table <- gather(demo_table3, key='Metric', value='Score', buying_price:popularity)
#alternative method
long_table <- demo_table3 %>% gather(key='Metric', value="Score", buying_price:popularity)
wide_table <- long_table %>% spread(key='Metric',value='Score')
head(mpg)
plt <- ggplot(mpg,aes(x=class))
plt + geom_bar()
print("printing to console")
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarise(Vehicle_Count=n(), .groups = 'keep')
plt + geom_col()
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups = 'keep')
plt + geom_col()
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups = 'keep')
plt <- ggplot(mpg_summary,aes(x=manufacturer,y=Vehicle_Count))
plt + geom_col()
myVector = c("Abraham","Beatrice","Cory","Dinah","Eric","Felicia")
myVector = c("Abraham","Beatrice","Cory","Dinah","Eric","Felicia")
myVector = c("Abraham","Beatrice","Cory","Dinah","Eric","Felicia")
attendance <- function(vector1) {
for (i in vector1) {
print(i + Sys.Date())
}
return("attendance")
}
attendance(myVector)
myVector = c("Abraham","Beatrice","Cory","Dinah","Eric","Felicia")
attendance <- function(vector1) {
for (i in vector1) {
print(paste(i,Sys.Date())
}
return("attendance")
}
attendance(myVector)
myVector = c("Abraham","Beatrice","Cory","Dinah","Eric","Felicia")
attendance <- function(vector1) {
for (i in vector1) {
print(f('{i},{Sys.Date()}')
}
return("attendance")
}
attendance(myVector)
myVector = c("Abraham","Beatrice","Cory","Dinah","Eric","Felicia")
attendance <- function(vector1) {
for (i in vector1) {
print(i,Sys.Date())
}
return("attendance")
}
attendance(myVector)
myVector = c("Abraham","Beatrice","Cory","Dinah","Eric","Felicia")
attendance <- function(vector1) {
for (i in vector1) {
print(i)
}
return("attendance")
}
attendance(myVector)
myVector = c("Abraham","Beatrice","Cory","Dinah","Eric","Felicia")
attendance <- function(vector1) {
for (i in vector1) {
print(c(i,Sys.Date())
}
return("attendance")
}
attendance(myVector)
myVector = c("Abraham","Beatrice","Cory","Dinah","Eric","Felicia")
attendance <- function(vector1) {
for (i in vector1) {
print(i)
print(Sys.Date())
}
return("attendance")
}
attendance(myVector)
myVector = c("Abraham","Beatrice","Cory","Dinah","Eric","Felicia")
attendance <- function(vector1) {
for (i in vector1) {
newVector = c(i,Sys.Date())
print(newVector)
}
return("attendance")
}
attendance(myVector)
reset_combos <- function(myVector1) {
for (i in myVector1) {
print(sample(33,3))
}
return ("done")
}
reset_combos(myVector)
reset_combos <- function(myVector1) {
for (i in myVector1) {
newVector = c(i,sample(33,3))
print(newVector)
}
return (newVector)
}
reset_combos(myVector)
setwd("~/DataScienceBootCamp/class_repo/dataviz/modules/module15/Activities/A4_Stu_Tibble")
#load dependencies
library(tidyverse)
myCsv <- read.csv("Resources/students.csv")
View(myCsv)
lst_schools <- myCsv$school_name
print(lst_schools)
lst_schools <- myCsv[school_name]
print(lst_schools)
lst_schools <- myCsv[school_name,]
print(lst_schools)
lst_schools <- myCsv[,school_name]
print(lst_schools)
View(myCsv)
lst_schools <- myCsv %>% group_by(school_name) %>% summarize(school_count = count(school_name) .groups= "keep")
print(lst_schools)
lst_schools <- myCsv %>% group_by(school_name) %>% summarize(school_count = count(school_name) .groups= "keep")
lst_schools <- myCsv %>% group_by(school_name) %>% summarize(school_count = count(school_name), .groups= "keep")
lst_schools <- myCsv %>% group_by(school_name) %>% summarize(school_1 = count(school_name), .groups= "keep")
lst_schools <- myCsv %>% group_by(school_name) %>% summarize(school_1 = count(school_name))
lst_schools <- group_by(myCsv)
print(lst_schools)
lst_schools <- group_by(school_name)
lst_schools <- group_by(myCsv$school_name)
lst_schools <- group_by(myCs)
print(lst_schools)
lst_schools <- myCsv %>% group_by(school_name)
print(lst_schools)
lst_schools <- myCsv %>% group_by(school_name)
print(lst_schools)
lst_schools <- myCsv %>% group_by(unique(school_name))
setwd("~/DataScienceBootCamp/Repos/R_analysis")
#import dependencies
library(jsonlite)
library(tidyverse)
library(ggplot)
#read csv file
demo_table <- read.csv(file='01_demo/demo.csv', check.names = F, stringsAsFactors = F)
#read json file
demo_table2 <- fromJSON(txt='01_demo/demo.json')
#filter table using the subset function
filter_table2 <- subset(demo_table2, price > 10000 & drive == "4wd" & "clean" %in% title_status)
#filter table using bracket notation
filter_table3 <- demo_table2[("clean" %in% demo_table2$title_status) & (demo_table2$price > 10000) & (demo_table2$drive == "4wd"),]
#create an array using c() or `concatenate` function
myArray = c("cow","deer","chicken","duck","sheep","dog")
#use sample() function to take a specified sample of a specified size from the elements of x using either with or without replacement
sample(myArray, 4)
#use nrow() function to retrive data frame rows from sample list
num_rows <- 1:nrow(demo_table)
#use sample() to sample specified rows
sample_rows <- sample(num_rows,3)
#combining all three steps into one statement   trailing comma
demo_table[sample(1:nrow(demo_table), 3),]
?tidyverse
?mutate
#function mutate() adds new variables and preserves existing ones; transmutate() adds new variables and drops existing ones, new variables overwrite existing variables of the same name. Variables can be removed by setting their value to NULL
demo_table <- demo_table %>% mutate(Mileage_per_Year=Total_Miles/(2020-Year),IsActive=TRUE)
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer), .groups = 'keep')
?gather()
demo_table3 <- read.csv('01_Demo/demo2.csv', check.names = F, stringsAsFactors = F)
#using gather to reshape/similar to edit dtypes
long_table <- gather(demo_table3, key='Metric', value='Score', buying_price:popularity)
#alternative method
long_table <- demo_table3 %>% gather(key='Metric', value="Score", buying_price:popularity)
wide_table <- long_table %>% spread(key='Metric',value='Score')
#mpg is kind of like 'dummy data' thrown into R to help with R examples
#shows the 'head' of the table
head(mpg)
#import the dataset into ggplot
plt <- ggplot(mpg,aes(x=class))
#plot a bar graph with the data
plt + geom_bar()
#documentation on geom_bar() function
?geom_bar
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups = 'keep')
plt <- ggplot(mpg_summary,aes(x=manufacturer,y=Vehicle_Count))
plt + geom_col()
#import dependencies
library(jsonlite)
library(tidyverse)
library(ggplot)
#read csv file
demo_table <- read.csv(file='01_demo/demo.csv', check.names = F, stringsAsFactors = F)
#read json file
demo_table2 <- fromJSON(txt='01_demo/demo.json')
#filter table using the subset function
filter_table2 <- subset(demo_table2, price > 10000 & drive == "4wd" & "clean" %in% title_status)
#filter table using bracket notation
filter_table3 <- demo_table2[("clean" %in% demo_table2$title_status) & (demo_table2$price > 10000) & (demo_table2$drive == "4wd"),]
#create an array using c() or `concatenate` function
myArray = c("cow","deer","chicken","duck","sheep","dog")
#use sample() function to take a specified sample of a specified size from the elements of x using either with or without replacement
sample(myArray, 4)
#use nrow() function to retrive data frame rows from sample list
num_rows <- 1:nrow(demo_table)
#use sample() to sample specified rows
sample_rows <- sample(num_rows,3)
#combining all three steps into one statement   trailing comma
demo_table[sample(1:nrow(demo_table), 3),]
?tidyverse
?mutate
#function mutate() adds new variables and preserves existing ones; transmutate() adds new variables and drops existing ones, new variables overwrite existing variables of the same name. Variables can be removed by setting their value to NULL
demo_table <- demo_table %>% mutate(Mileage_per_Year=Total_Miles/(2020-Year),IsActive=TRUE)
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer), .groups = 'keep')
?gather()
demo_table3 <- read.csv('01_Demo/demo2.csv', check.names = F, stringsAsFactors = F)
#using gather to reshape/similar to edit dtypes
long_table <- gather(demo_table3, key='Metric', value='Score', buying_price:popularity)
#alternative method
long_table <- demo_table3 %>% gather(key='Metric', value="Score", buying_price:popularity)
wide_table <- long_table %>% spread(key='Metric',value='Score')
#mpg is kind of like 'dummy data' thrown into R to help with R examples
#shows the 'head' of the table
head(mpg)
#import the dataset into ggplot
plt <- ggplot(mpg,aes(x=class))
#plot a bar graph with the data
plt + geom_bar()
#documentation on geom_bar() function
?geom_bar
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups = 'keep')
plt <- ggplot(mpg_summary,aes(x=manufacturer,y=Vehicle_Count))
plt + geom_col()
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset")
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") +
theme(axis.test.x=element_text(angle=45,hjust=1))
> plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") + #plot a boxplot with labels
>theme(axis.text.x=element_text(angle=45,hjust=1))
> plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") + #plot a boxplot with labels
theme(axis.text.x=element_text(angle=45,hjust=1))
> plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") + #plot a boxplot with labels
theme(axis.text.x=element_text(angle=45,hjust=1))
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") +
theme(axis.test.x=element_text(angle=45,hjust=1))
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") +
theme(axis.test.x=element_text(angle=45,hjust=1))
> plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") + #plot a boxplot with labels
theme(axis.text.x=element_text(angle=45,hjust=1))
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups = 'keep')
plt <- ggplot(mpg_summary,aes(x=manufacturer,y=Vehicle_Count))
plt + geom_col()
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") +
theme(axis.text.x=element_text(angle=45,hjust=1))
mpg_summary <- subset(mpg,manufactuer=="toyota") %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy), .groups= 'keep')
ry <- subset(mpg,manufacturer=="toyota") %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy), .groups= 'keep')
mpg_summary <- subset(mpg,manufacturer=="toyota") %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy), .groups= 'keep')
plt <- ggplot(mpg_summary,aes(x=cyl,y=Mean_Hwy))
plt
View(mpg_summary)
plt + geom_line()
plt + geom_line() + scale_x_discrete(limits=c(4,5,6)) + scale_y_continuous(breaks = c(15:30))
plt <- ggplot(mpg,aes(x=displ,ycty))
View(mpg_summary)
one <- mpg
View(one)
plt <- ggplot(mpg,aes(x=displ,ycty))
plt + geom_point() + xlab("Engine Size (L)") + ylab("City Fuel-Efficiency (MPG)")
plt <- ggplot(mpg,aes(x=displ,y=cty))
plt + geom_point() + xlab("Engine Size (L)") + ylab("City Fuel-Efficiency (MPG)")
plt <- ggplot(mpg,aes(x=disp,y=cty,color=class))
plt + geom_point() + labs(x="Engine Size (L)", y ="City Fuel-Efficiecncy (MPG)", color="Vehivle Class")
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class))
plt + geom_point() + labs(x="Engine Size (L)", y ="City Fuel-Efficiecncy (MPG)", color="Vehivle Class")
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class,shape=drv)) #import dataset into ggplot2
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class",shape="Type of Drive")
plt <- ggplot(mpg,aes(y=hwy))
plt + geom_boxplot()
plt <- ggplot(mpg,aes(y=hwy))
plt + geom_boxplot() + theme(axis.text.x=element_text(angle = 45,hjust=1))
mpg
mpg <- mpg
mpg_summary <- mpg %>% group_by(class,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep')
View(mpg_summary)
plt <- ggplot(mpg_summary, aes(x=class,y=factor(year),fill=Mean_Hwy))
plt + geom_tile() + labs(x="Vehicle Class",y="Vehicle Year",fill = "Mean Highway (MPG)")
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy = mean(hwy), .groups= "keep")
plt <- ggplot(mpg_summary, aes(x=model,y=factor(year),fill=Mean_Hwy))
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG))")
plt < - ggplot(mpg,aes(x=manufacturer,y=hwy))
plt + geom_boxplot()
theme(axis.text.x=element_text(angle = 45, hjust=1))
geom_point()
plt <- ggplot(mpg_summary, aes(x=model,y=factor(year),fill=Mean_Hwy))
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG))")
plt < - ggplot(mpg,aes(x=manufacturer,y=hwy))
plt + geom_boxplot()
theme(axis.text.x=element_text(angle = 45, hjust=1))
geom_point()
plt <- ggplot(mpg_summary, aes(x=model,y=factor(year),fill=Mean_Hwy))
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG))")
plt < - ggplot(mpg,aes(x=manufacturer,y=hwy))
plt + geom_boxplot()
theme(axis.text.x=element_text(angle = 45, hjust=1))
geom_point()
plt < - ggplot(mpg,aes(x=manufacturer,y=hwy))
plt + geom_boxplot() +
theme(axis.text.x=element_text(angle = 45, hjust=1)) +
geom_point()
plt <- ggplot(mpg_summary, aes(x=model,y=factor(year),fill=Mean_Hwy))
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG))")
plt < - ggplot(mpg,aes(x=manufacturer,y=hwy))
plt + geom_boxplot() +
theme(axis.text.x=element_text(angle = 45, hjust=1)) +
geom_point()
plt <- ggplot(mpg_summary, aes(x=model,y=factor(year),fill=Mean_Hwy))
source('~/DataScienceBootCamp/Repos/R_analysis/StartingModule.R', echo=TRUE)
#import dependencies
library(jsonlite)
library(tidyverse)
library(ggplot)
source('~/DataScienceBootCamp/Repos/R_analysis/StartingModule.R', echo=TRUE)
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy = mean(hwy), .groups= "keep")
plt <- ggplot(mpg_summary, aes(x=model,y=factor(year),fill=Mean_Hwy))
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG))")
plt < - ggplot(mpg,aes(x=manufacturer,y=hwy))
plt + geom_boxplot() +
theme(axis.text.x=element_text(angle = 45, hjust=1)) +
geom_point()
source('~/DataScienceBootCamp/Repos/R_analysis/StartingModule.R', echo=TRUE)
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy = mean(hwy), .groups= "keep")
plt <- ggplot(mpg_summary, aes(x=model,y=factor(year),fill=Mean_Hwy))
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG))")
plt < - ggplot(mpg,aes(x=manufacturer,y=hwy)) +
plt + geom_boxplot() +
theme(axis.text.x=element_text(angle = 45, hjust=1)) +
geom_point()
plt <- ggplot(mpg, aes(x=model,y=factor(year),fill=Mean_Hwy))
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG))")
plt < - ggplot(mpg,aes(x=manufacturer,y=hwy)) +
plt + geom_boxplot() +
theme(axis.text.x=element_text(angle = 45, hjust=1)) +
geom_point()
plt <- ggplot(mpg, aes(x=model,y=factor(year),fill=Mean_Hwy))
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG))")
plt < - ggplot(mpg,aes(x=manufacturer,y=hwy)) +
plt + geom_boxplot() +
theme(axis.text.x=element_text(angle = 45, hjust=1)) +
geom_point()
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() + #add boxplot
theme(axis.text.x=element_text(angle=45,hjust=1)) + #rotate x-axis labels 45 degrees
geom_point() #overlay scatter plot on top
plt < - ggplot(mpg,aes(x=manufacturer,y=hwy))
plt + geom_boxplot() +
theme(axis.text.x=element_text(angle = 45, hjust=1)) +
geom_point()
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_engine=mean(displ), .groups="keep")
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_engine))
plt + geom_points(size=4) + labs(x="Vehicle Class",y="Mean Engine Size")
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_engine=mean(displ), .groups="keep")
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_engine))
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size")
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ),SD_Engine=sd(displ))
View(mpg_summary)
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ),SD_Engine=sd(displ))
plt <- ggplot(mpg_summary, x=class,y=Mean_engine))
plt + geom_point(size = 4) + labs(x="Vehicle Class",y="Mean Engine Size") +
geom_errorbar(ymin=Mean_Engine-SD_Engine,ymax=Mean_Engine+SD_Engine)
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ),SD_Engine=sd(displ))
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ),SD_Engine=sd(displ), .groups="keep")
plt <- ggplot(mpg_summary, x=class,y=Mean_engine))
plt + geom_point(size = 4) + labs(x="Vehicle Class",y="Mean Engine Size") +
geom_errorbar(ymin=Mean_Engine-SD_Engine,ymax=Mean_Engine+SD_Engine)
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ),SD_Engine=sd(displ), .groups="keep")
plt <- ggplot(mpg_summary, x=class,y=Mean_engine))
plt <- ggplot(mpg_summary, x=class,y=Mean_engine)
plt + geom_point(size = 4) + labs(x="Vehicle Class",y="Mean Engine Size") +
geom_errorbar(ymin=Mean_Engine-SD_Engine,ymax=Mean_Engine+SD_Engine)
geom_errorbar(aes(ymin=Mean_Engine-SD_Engine,ymax=Mean_Engine+SD_Engine)
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ),SD_Engine=sd(displ), .groups="keep")
plt <- ggplot(mpg_summary, x=class,y=Mean_engine)
plt + geom_point(size = 4) + labs(x="Vehicle Class",y="Mean Engine Size") +
geom_errorbar(aes(ymin=Mean_Engine-SD_Engine,ymax=Mean_Engine+SD_Engine)
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ),SD_Engine=sd(displ), .groups="keep")
plt <- ggplot(mpg_summary, x=class,y=Mean_engine)
plt + geom_point(size = 4) + labs(x="Vehicle Class",y="Mean Engine Size") +
geom_errorbar(aes(ymin=Mean_Engine-SD_Engine,ymax=Mean_Engine+SD_Engine)
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ),SD_Engine=sd(displ), .groups="keep")
plt <- ggplot(mpg_summary, x=class,y=Mean_engine)
plt + geom_point(size = 4) + labs(x="Vehicle Class",y="Mean Engine Size") +
geom_errorbar(aes(ymin=Mean_Engine-SD_Engine,ymax=Mean_Engine+SD_Engine))
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ),SD_Engine=sd(displ), .groups="keep")
plt <- ggplot(mpg_summary, aes(x=class,y=Mean_engine))
plt + geom_point(size = 4) + labs(x="Vehicle Class",y="Mean Engine Size") +
geom_errorbar(aes(ymin=Mean_Engine-SD_Engine,ymax=Mean_Engine+SD_Engine))
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ),SD_Engine=sd(displ), .groups="keep")
plt <- ggplot(mpg_summary, aes(x=class,y=Mean_Engine))
plt + geom_point(size = 4) + labs(x="Vehicle Class",y="Mean Engine Size") +
geom_errorbar(aes(ymin=Mean_Engine-SD_Engine,ymax=Mean_Engine+SD_Engine))
mpg_long <- mpg %>% gather(key="MPG_Type",value="Rating",c(cty,hwy))
head(mpg_long)
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type))
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1))
?facet_wrap
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type))
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1)) + facet_wrap(vars(MPG_Type))
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type))
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1),legend.position= "none") + facet_wrap(vars(MPG_Type)) +
xlab("Manufacturer")
ggplot(mtcars,aes(x=wt)) + geon_density()
ggplot(mtcars,aes(x=wt)) + geom_density()
?shapiro.test
shapiro.test(mtcars$wt)
?cor()
head(mtcars)
plt <- ggplot(mtcars,aes(x=hp,y=qsec))
plt + geom_point()
cor(mtcars$hp,mtcars$qsec)
used_cars
?lm()
lm(qsec ~ hp,mtcars)
summary(lm(qsec ~ hp,mtcars))
model <- lm(qsec ~ hp, mtcars)
yvals <- model$coefficients['hp']*mtcars$hp+model$coeffecients[('Intercept')]
model <- lm(qsec ~ hp,mtcars) #create linear model
yvals <- model$coefficients['hp']*mtcars$hp +
model$coefficients['(Intercept)']
model <- lm(qsec ~ hp, mtcars)
yvals <- model$coefficients['hp']*mtcars$hp+model$coeffecients['(Intercept)']
model <- lm(qsec ~ hp, mtcars)
yvals <- model$coefficients['hp']*mtcars$hp + model$coeffecients['(Intercept)']
model <- lm(qsec ~ hp,mtcars)
yvals <- model$coefficients['hp']*mtcars$hp + model$coeffecients['(Intercept)']
yvals <- model$coefficients['hp']*mtcars$hp + model$coefficients['(Intercept)']
model <- lm(qsec ~ hp, mtcars)
yvals <- model$coefficients['hp']*mtcars$hp + model$coefficients['(Intercept)']
plt <- ggplot(mtcars, aes(x=hp,y=qsec))
okt + geom_point() + geom_line(aes(y=yvals), color = "red")
plt <- ggplot(mtcars, aes(x=hp,y=qsec))
plt + geom_point() + geom_line(aes(y=yvals), color = "red")
lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars)
summary(lm(qsec ~ mpg + disp + drat + wt + hp, data=mtcars))
?chisq.test()
mpg$class
mpg$year
table(mpg$class,mpg$year)
table(mpg$class,mpg$year) %>% chisq.test()
#import dependencies
library(jsonlite)
library(tidyverse)
library(ggplot)
setwd("~/DataScienceBootCamp/Repos/Mod_15_R_folder/R_analysis")
#import dependencies
library(jsonlite)
library(tidyverse)
library(ggplot)
library(dplyr)
MechaCar_data <- read.csv("challenge_csvs/MechaCar_mpg.csv")
?lm()
lm(qsec ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD + mpg)
lm(qsec ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD + mpg, MechaCar_data)
lm(vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD + mpg, MechaCar_data)
lm(vehicle_length ~ vehicle_weight + spoiler_angle + ground_clearance + AWD + mpg, MechaCar_data)
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, MechaCar_data)
?lm()
?summary()
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, MechaCar_data))
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, MechaCar_data))
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, MechaCar_data))
Suspension_Coil_data <- read.csv("challenge_csvs/Suspension_Coil.csv")
total_summary <- summary(total_summary)
total_summary <- summary(Suspension_Coil_data)
total_summary
total_summary <- summarize(Suspension_Coil_data)
total_summary
View(total_summary)
View(total_summary)
total_summary <- summarize(Suspension_Coil_data$PSI)
total_summary <- summarise(Suspension_Coil_data$PSI)
total_summary <- summarize(Suspension_Coil_data$PSI)
View(total_summary)
?summarise()
total_summary <- Suspension_Coil_data %>% summarise(Mean_PSI=mean(PSI), Median_PSI=median(PSI), Variance_PSI=var(PSI), STD_PSI=sd(PSI) )
View(total_summary)
lot_summary <- Suspension_Coil_data %>% group_by(Manufactureing_Lot) %>% summarise(Mean_PSI=mean(PSI), Median_PSI=median(PSI), Variance_PSI=var(PSI), STD_PSI=sd(PSI) )
lot_summary <- Suspension_Coil_data %>% group_by(Manufacturing_Lot) %>% summarise(Mean_PSI=mean(PSI), Median_PSI=median(PSI), Variance_PSI=var(PSI), STD_PSI=sd(PSI) )
lot_summary <- Suspension_Coil_data %>% group_by(Manufacturing_Lot) %>% summarise(Mean_PSI=mean(PSI), Median_PSI=median(PSI), Variance_PSI=var(PSI), STD_PSI=sd(PSI), .groups='keep')
View(lot_summary)
?t.test()
t.test(total_summary)
t.test(total_summary$Mean_PSI,mu=mean(Suspension_Coil_data$PSI))
View(lot_summary)
View(total_summary)
mean_psi_total_summary <- 1498.78
t.test(lot_summary$Mean_PSI,mu=mean_psi_total_summary)
t.test(total_summary$Mean_PSI,mu=mean_psi_total_summary)
t.test(Suspension_Coil_data$PSI,mu=mean_psi_total_summary)
t.test(Suspension_Coil_data$PSI,mu=total_summary$Mean_PSI)
t.test(Suspension_Coil_data$PSI,mu=mean_psi_total_summary)
?subset()
t.test(subset(Suspension_Coil_data, Manufacturing_Lot == "Lot1"),mu=mean_psi_total_summary)
t.test(subset(Suspension_Coil_data, Manufacturing_Lot == "Lot1", select = PSI),mu=mean_psi_total_summary)
t.test(subset(Suspension_Coil_data, Manufacturing_Lot == "Lot1", select = PSI),mu=mean_psi_total_summary)
t.test(subset(Suspension_Coil_data, Manufacturing_Lot == "Lot2", select = PSI),mu=mean_psi_total_summary)
t.test(subset(Suspension_Coil_data, Manufacturing_Lot == "Lot3", select = PSI),mu=mean_psi_total_summary)
mean(Suspension_Coil_data$PSI)
t.test(subset(Suspension_Coil_data, Manufacturing_Lot == "Lot1", select = PSI),subset(Suspension_Coil_data, Manufacturing_Lot == "Lot2", select = PSI),subset(Suspension_Coil_data, Manufacturing_Lot == "Lot3", select = PSI))
t.test(subset(Suspension_Coil_data, Manufacturing_Lot == "Lot1", select = PSI),subset(Suspension_Coil_data, Manufacturing_Lot == "Lot2", select = PSI),subset(Suspension_Coil_data, Manufacturing_Lot == "Lot3", select = PSI),mu=mean_psi_total_summary)
source('~/DataScienceBootCamp/Repos/Mod_15_R_folder/R_analysis/MechaCarChallenge.R', echo=TRUE)
